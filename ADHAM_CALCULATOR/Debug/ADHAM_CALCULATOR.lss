
ADHAM_CALCULATOR.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000005ac  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000028  00800060  000005ac  00000620  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000648  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000678  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000128  00000000  00000000  000006b4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000015a4  00000000  00000000  000007dc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000b66  00000000  00000000  00001d80  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000c1e  00000000  00000000  000028e6  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000204  00000000  00000000  00003504  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000645  00000000  00000000  00003708  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000008db  00000000  00000000  00003d4d  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000000c8  00000000  00000000  00004628  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ec ea       	ldi	r30, 0xAC	; 172
  68:	f5 e0       	ldi	r31, 0x05	; 5
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a8 38       	cpi	r26, 0x88	; 136
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>
  76:	0e 94 a9 02 	call	0x552	; 0x552 <main>
  7a:	0c 94 d4 02 	jmp	0x5a8	; 0x5a8 <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <StartCalculator>:
#include "LCD.h"
#include "queue.h"
#include "calculator.h"

void StartCalculator()
{
  82:	cf 93       	push	r28
  84:	df 93       	push	r29
  86:	cd b7       	in	r28, 0x3d	; 61
  88:	de b7       	in	r29, 0x3e	; 62
  8a:	a3 97       	sbiw	r28, 0x23	; 35
  8c:	0f b6       	in	r0, 0x3f	; 63
  8e:	f8 94       	cli
  90:	de bf       	out	0x3e, r29	; 62
  92:	0f be       	out	0x3f, r0	; 63
  94:	cd bf       	out	0x3d, r28	; 61
	vLCDInit(); //Initialize LCD driver
  96:	0e 94 5d 02 	call	0x4ba	; 0x4ba <vLCDInit>
	vKeypadInit(); //Initialize Keypad driver
  9a:	0e 94 7a 01 	call	0x2f4	; 0x2f4 <vKeypadInit>
	
	char keypad_input=0; //Storage for keypad characters
	unsigned char index=0; //Current character index in the input buffer
	queue_t input_buffer; //Input buffer for keypad and LCD as a queue
	vQueueInit(&input_buffer); //Clear input buffer
  9e:	ce 01       	movw	r24, r28
  a0:	01 96       	adiw	r24, 0x01	; 1
  a2:	0e 94 b2 00 	call	0x164	; 0x164 <vQueueInit>
	string_parser_output_t *parser_output = NULL; //Pointer to take the return of the string parser as a struct
	char string_parser_input[CALC_LCD_LENGTH]; //Array to store the input and send it to the string parser
	uint8_t string_parser_input_index=0; //Index of array
  a6:	00 e0       	ldi	r16, 0x00	; 0
  a8:	56 c0       	rjmp	.+172    	; 0x156 <StartCalculator+0xd4>
	while(1)
	{
		while(index<=CALC_LCD_LENGTH)
		{
			keypad_input = ucKeypadScan(); //Scan keypad for input
			if((keypad_input!=NO_VALID_INPUT) && (keypad_input!='C') && (keypad_input!='=')) //if there is a valid input start capturing it in the input buffer
  aa:	13 34       	cpi	r17, 0x43	; 67
  ac:	99 f0       	breq	.+38     	; 0xd4 <StartCalculator+0x52>
  ae:	1d 33       	cpi	r17, 0x3D	; 61
  b0:	c1 f0       	breq	.+48     	; 0xe2 <StartCalculator+0x60>
			{
				if(x8QueueEmpty(&input_buffer) == TRUE)
  b2:	ce 01       	movw	r24, r28
  b4:	01 96       	adiw	r24, 0x01	; 1
  b6:	0e 94 b8 00 	call	0x170	; 0x170 <x8QueueEmpty>
  ba:	81 30       	cpi	r24, 0x01	; 1
  bc:	11 f4       	brne	.+4      	; 0xc2 <StartCalculator+0x40>
				{
					//If the user inputs something after a result is displayed, return the cursor and clear the display
					vLCDClearDisplay();
  be:	0e 94 59 02 	call	0x4b2	; 0x4b2 <vLCDClearDisplay>
				}
				vQueueInsert(&input_buffer, keypad_input); //Add typed characters to the input buffer
  c2:	61 2f       	mov	r22, r17
  c4:	ce 01       	movw	r24, r28
  c6:	01 96       	adiw	r24, 0x01	; 1
  c8:	0e 94 bf 00 	call	0x17e	; 0x17e <vQueueInsert>
				vLCDSendCharacter(keypad_input); //Echo typed characters on the LCD
  cc:	81 2f       	mov	r24, r17
  ce:	0e 94 00 02 	call	0x400	; 0x400 <vLCDSendCharacter>
  d2:	41 c0       	rjmp	.+130    	; 0x156 <StartCalculator+0xd4>
			}else if(keypad_input=='C')
			{
				//If the user pushes the Clear 'C' key, clear the input buffer, clear the display
				vLCDClearDisplay();
  d4:	0e 94 59 02 	call	0x4b2	; 0x4b2 <vLCDClearDisplay>
				vQueueInit(&input_buffer);
  d8:	ce 01       	movw	r24, r28
  da:	01 96       	adiw	r24, 0x01	; 1
  dc:	0e 94 b2 00 	call	0x164	; 0x164 <vQueueInit>
  e0:	3a c0       	rjmp	.+116    	; 0x156 <StartCalculator+0xd4>
			}else if(keypad_input=='=')
			{	//If the user pushes the '=' key and the input buffer isn't empty, start calculating
 				if(x8QueueEmpty(&input_buffer)==0)
  e2:	ce 01       	movw	r24, r28
  e4:	01 96       	adiw	r24, 0x01	; 1
  e6:	0e 94 b8 00 	call	0x170	; 0x170 <x8QueueEmpty>
  ea:	81 11       	cpse	r24, r1
  ec:	34 c0       	rjmp	.+104    	; 0x156 <StartCalculator+0xd4>
 				{
 					vLCDGotoXY(0,1); //Go to second line on the LCD to display the result
  ee:	61 e0       	ldi	r22, 0x01	; 1
  f0:	0e 94 49 02 	call	0x492	; 0x492 <vLCDGotoXY>
					 {
						 vLCDSendCharacter(dataQueuePop(&input_buffer));
					 }
					 */
					 
					 while(x8QueueEmpty(&input_buffer)==FALSE)
  f4:	0c c0       	rjmp	.+24     	; 0x10e <StartCalculator+0x8c>
					 {
						 string_parser_input[string_parser_input_index] = dataQueuePop(&input_buffer);
  f6:	ce 01       	movw	r24, r28
  f8:	01 96       	adiw	r24, 0x01	; 1
  fa:	0e 94 d4 00 	call	0x1a8	; 0x1a8 <dataQueuePop>
  fe:	e4 e1       	ldi	r30, 0x14	; 20
 100:	f0 e0       	ldi	r31, 0x00	; 0
 102:	ec 0f       	add	r30, r28
 104:	fd 1f       	adc	r31, r29
 106:	e0 0f       	add	r30, r16
 108:	f1 1d       	adc	r31, r1
 10a:	80 83       	st	Z, r24
						 string_parser_input_index++;
 10c:	0f 5f       	subi	r16, 0xFF	; 255
					 {
						 vLCDSendCharacter(dataQueuePop(&input_buffer));
					 }
					 */
					 
					 while(x8QueueEmpty(&input_buffer)==FALSE)
 10e:	ce 01       	movw	r24, r28
 110:	01 96       	adiw	r24, 0x01	; 1
 112:	0e 94 b8 00 	call	0x170	; 0x170 <x8QueueEmpty>
 116:	88 23       	and	r24, r24
 118:	71 f3       	breq	.-36     	; 0xf6 <StartCalculator+0x74>
 					
					/* For testing, display string parser string on LCD on '='
					vLCDSendString(string_parser_input); */
					 
					//Parse the input data and get the operands, operation, and errors in a struct
					vStringparserParse(string_parser_input, parser_output);
 11a:	60 e0       	ldi	r22, 0x00	; 0
 11c:	70 e0       	ldi	r23, 0x00	; 0
 11e:	ce 01       	movw	r24, r28
 120:	44 96       	adiw	r24, 0x14	; 20
 122:	0e 94 e6 00 	call	0x1cc	; 0x1cc <vStringparserParse>
					
 					switch(parser_output->err)
 126:	80 91 05 00 	lds	r24, 0x0005	; 0x800005 <__TEXT_REGION_LENGTH__+0x7e0005>
 12a:	81 30       	cpi	r24, 0x01	; 1
 12c:	19 f0       	breq	.+6      	; 0x134 <StartCalculator+0xb2>
 12e:	82 30       	cpi	r24, 0x02	; 2
 130:	51 f0       	breq	.+20     	; 0x146 <StartCalculator+0xc4>
 132:	11 c0       	rjmp	.+34     	; 0x156 <StartCalculator+0xd4>
							//clean up
							//vLCDSendString(itoa(parser_output->num1,lolo,10));
							//vLCDGotoXY(0,0);
 							break;
 						case CALC_SYNTAX_ERR: //Display syntax error if the string parser says so, and clean up for new input
 							vLCDSendString("Syntax Error");
 134:	80 e6       	ldi	r24, 0x60	; 96
 136:	90 e0       	ldi	r25, 0x00	; 0
 138:	0e 94 15 02 	call	0x42a	; 0x42a <vLCDSendString>
 							vQueueInit(&input_buffer);
 13c:	ce 01       	movw	r24, r28
 13e:	01 96       	adiw	r24, 0x01	; 1
 140:	0e 94 b2 00 	call	0x164	; 0x164 <vQueueInit>
 							break;
 144:	08 c0       	rjmp	.+16     	; 0x156 <StartCalculator+0xd4>
 						case CALC_MATH_ERR: //Display math error if the string parser says so, and clean up for new input
 							vLCDSendString("Math Error");
 146:	8d e6       	ldi	r24, 0x6D	; 109
 148:	90 e0       	ldi	r25, 0x00	; 0
 14a:	0e 94 15 02 	call	0x42a	; 0x42a <vLCDSendString>
							 vQueueInit(&input_buffer);
 14e:	ce 01       	movw	r24, r28
 150:	01 96       	adiw	r24, 0x01	; 1
 152:	0e 94 b2 00 	call	0x164	; 0x164 <vQueueInit>
	
	while(1)
	{
		while(index<=CALC_LCD_LENGTH)
		{
			keypad_input = ucKeypadScan(); //Scan keypad for input
 156:	0e 94 8b 01 	call	0x316	; 0x316 <ucKeypadScan>
 15a:	18 2f       	mov	r17, r24
			if((keypad_input!=NO_VALID_INPUT) && (keypad_input!='C') && (keypad_input!='=')) //if there is a valid input start capturing it in the input buffer
 15c:	8f 3f       	cpi	r24, 0xFF	; 255
 15e:	09 f0       	breq	.+2      	; 0x162 <StartCalculator+0xe0>
 160:	a4 cf       	rjmp	.-184    	; 0xaa <StartCalculator+0x28>
 162:	f9 cf       	rjmp	.-14     	; 0x156 <StartCalculator+0xd4>

00000164 <vQueueInit>:
}

int8_t x8QueueSize(queue_t *queue)
{
	return (queue->itemCount);
}
 164:	fc 01       	movw	r30, r24
 166:	10 8a       	std	Z+16, r1	; 0x10
 168:	8f ef       	ldi	r24, 0xFF	; 255
 16a:	81 8b       	std	Z+17, r24	; 0x11
 16c:	12 8a       	std	Z+18, r1	; 0x12
 16e:	08 95       	ret

00000170 <x8QueueEmpty>:
 170:	21 e0       	ldi	r18, 0x01	; 1
 172:	fc 01       	movw	r30, r24
 174:	82 89       	ldd	r24, Z+18	; 0x12
 176:	81 11       	cpse	r24, r1
 178:	20 e0       	ldi	r18, 0x00	; 0
 17a:	82 2f       	mov	r24, r18
 17c:	08 95       	ret

0000017e <vQueueInsert>:

void vQueueInsert(queue_t *queue, QUEUE_TYPE data)
{
 17e:	fc 01       	movw	r30, r24
	return (queue->itemCount == 0);
}

int8_t x8QueueFull(queue_t *queue)
{
	return (queue->itemCount == QUEUE_MAX);
 180:	82 89       	ldd	r24, Z+18	; 0x12
}

void vQueueInsert(queue_t *queue, QUEUE_TYPE data)
{

	if(!x8QueueFull(queue))
 182:	80 31       	cpi	r24, 0x10	; 16
 184:	81 f0       	breq	.+32     	; 0x1a6 <vQueueInsert+0x28>
	{
		if(queue->rear == QUEUE_MAX-1)
 186:	91 89       	ldd	r25, Z+17	; 0x11
 188:	9f 30       	cpi	r25, 0x0F	; 15
 18a:	11 f4       	brne	.+4      	; 0x190 <vQueueInsert+0x12>
		{
			queue->rear = -1;
 18c:	9f ef       	ldi	r25, 0xFF	; 255
 18e:	91 8b       	std	Z+17, r25	; 0x11
		}
		queue->QueueArray[++(queue->rear)] = data;
 190:	91 89       	ldd	r25, Z+17	; 0x11
 192:	9f 5f       	subi	r25, 0xFF	; 255
 194:	91 8b       	std	Z+17, r25	; 0x11
 196:	df 01       	movw	r26, r30
 198:	a9 0f       	add	r26, r25
 19a:	b1 1d       	adc	r27, r1
 19c:	97 fd       	sbrc	r25, 7
 19e:	ba 95       	dec	r27
 1a0:	6c 93       	st	X, r22
		(queue->itemCount)++;
 1a2:	8f 5f       	subi	r24, 0xFF	; 255
 1a4:	82 8b       	std	Z+18, r24	; 0x12
 1a6:	08 95       	ret

000001a8 <dataQueuePop>:
	}
}

QUEUE_TYPE dataQueuePop(queue_t *queue)
{
 1a8:	fc 01       	movw	r30, r24
	QUEUE_TYPE data = queue->QueueArray[(queue->front)++];
 1aa:	80 89       	ldd	r24, Z+16	; 0x10
 1ac:	91 e0       	ldi	r25, 0x01	; 1
 1ae:	98 0f       	add	r25, r24
 1b0:	90 8b       	std	Z+16, r25	; 0x10
 1b2:	df 01       	movw	r26, r30
 1b4:	a8 0f       	add	r26, r24
 1b6:	b1 1d       	adc	r27, r1
 1b8:	87 fd       	sbrc	r24, 7
 1ba:	ba 95       	dec	r27
 1bc:	8c 91       	ld	r24, X
	
	if(queue->front == QUEUE_MAX)
 1be:	90 31       	cpi	r25, 0x10	; 16
 1c0:	09 f4       	brne	.+2      	; 0x1c4 <dataQueuePop+0x1c>
	{
		queue->front = 0;
 1c2:	10 8a       	std	Z+16, r1	; 0x10
	}
	
	(queue->itemCount)--;
 1c4:	92 89       	ldd	r25, Z+18	; 0x12
 1c6:	91 50       	subi	r25, 0x01	; 1
 1c8:	92 8b       	std	Z+18, r25	; 0x12
	return data;
}
 1ca:	08 95       	ret

000001cc <vStringparserParse>:
#include <stdint.h>
#include <stdlib.h>
#include <ctype.h>

void vStringparserParse(char *strng, string_parser_output_t *output)
{
 1cc:	ff 92       	push	r15
 1ce:	0f 93       	push	r16
 1d0:	1f 93       	push	r17
 1d2:	cf 93       	push	r28
 1d4:	df 93       	push	r29
 1d6:	00 d0       	rcall	.+0      	; 0x1d8 <vStringparserParse+0xc>
 1d8:	00 d0       	rcall	.+0      	; 0x1da <vStringparserParse+0xe>
 1da:	00 d0       	rcall	.+0      	; 0x1dc <vStringparserParse+0x10>
 1dc:	cd b7       	in	r28, 0x3d	; 61
 1de:	de b7       	in	r29, 0x3e	; 62
 1e0:	dc 01       	movw	r26, r24
	char temp1[CALC_MAX_NUM_DIGITS];
	char temp2[CALC_MAX_NUM_DIGITS];
	uint8_t temp_index=0;
	
	//Initialize
	output->num1 = 0;
 1e2:	fb 01       	movw	r30, r22
 1e4:	11 82       	std	Z+1, r1	; 0x01
 1e6:	10 82       	st	Z, r1
	output->num2 = 0;
 1e8:	13 82       	std	Z+3, r1	; 0x03
 1ea:	12 82       	std	Z+2, r1	; 0x02
	output->op = 0;
 1ec:	14 82       	std	Z+4, r1	; 0x04
	output->err = CALC_NO_ERR;
 1ee:	15 82       	std	Z+5, r1	; 0x05

	//Determine the length of text
	while(strng[string_length]!= '\0')
 1f0:	8c 91       	ld	r24, X
 1f2:	88 23       	and	r24, r24
 1f4:	79 f0       	breq	.+30     	; 0x214 <vStringparserParse+0x48>
 1f6:	90 e0       	ldi	r25, 0x00	; 0
	{
		string_length++;
 1f8:	9f 5f       	subi	r25, 0xFF	; 255
	output->num2 = 0;
	output->op = 0;
	output->err = CALC_NO_ERR;

	//Determine the length of text
	while(strng[string_length]!= '\0')
 1fa:	29 2f       	mov	r18, r25
 1fc:	30 e0       	ldi	r19, 0x00	; 0
 1fe:	fd 01       	movw	r30, r26
 200:	e2 0f       	add	r30, r18
 202:	f3 1f       	adc	r31, r19
 204:	40 81       	ld	r20, Z
 206:	41 11       	cpse	r20, r1
 208:	f7 cf       	rjmp	.-18     	; 0x1f8 <vStringparserParse+0x2c>
	{
		string_length++;
	}
	
	//Errors
	if(strng[0]=='*' || strng[0]=='/' || strng[string_length-1]=='+' || strng[string_length-1]=='-' || strng[string_length-1]=='*' || strng[string_length-1]=='/')
 20a:	8a 32       	cpi	r24, 0x2A	; 42
 20c:	a9 f0       	breq	.+42     	; 0x238 <vStringparserParse+0x6c>
 20e:	8f 32       	cpi	r24, 0x2F	; 47
 210:	21 f4       	brne	.+8      	; 0x21a <vStringparserParse+0x4e>
 212:	12 c0       	rjmp	.+36     	; 0x238 <vStringparserParse+0x6c>
	output->num2 = 0;
	output->op = 0;
	output->err = CALC_NO_ERR;

	//Determine the length of text
	while(strng[string_length]!= '\0')
 214:	20 e0       	ldi	r18, 0x00	; 0
 216:	30 e0       	ldi	r19, 0x00	; 0
#include <ctype.h>

void vStringparserParse(char *strng, string_parser_output_t *output)
{
	//A function to take user input and parse it to get 2 integer operands and one math operation and report wrong format
	uint8_t string_length=0; //the length of the text
 218:	90 e0       	ldi	r25, 0x00	; 0
	{
		string_length++;
	}
	
	//Errors
	if(strng[0]=='*' || strng[0]=='/' || strng[string_length-1]=='+' || strng[string_length-1]=='-' || strng[string_length-1]=='*' || strng[string_length-1]=='/')
 21a:	2a 0f       	add	r18, r26
 21c:	3b 1f       	adc	r19, r27
 21e:	f9 01       	movw	r30, r18
 220:	31 97       	sbiw	r30, 0x01	; 1
 222:	80 81       	ld	r24, Z
 224:	28 2f       	mov	r18, r24
 226:	2d 7f       	andi	r18, 0xFD	; 253
 228:	2d 32       	cpi	r18, 0x2D	; 45
 22a:	31 f0       	breq	.+12     	; 0x238 <vStringparserParse+0x6c>
 22c:	8a 52       	subi	r24, 0x2A	; 42
 22e:	82 30       	cpi	r24, 0x02	; 2
 230:	18 f0       	brcs	.+6      	; 0x238 <vStringparserParse+0x6c>
	{
		output->err = CALC_SYNTAX_ERR;
	}else{
		//Test string
		while(string_index<string_length)
 232:	91 11       	cpse	r25, r1
 234:	05 c0       	rjmp	.+10     	; 0x240 <vStringparserParse+0x74>
 236:	43 c0       	rjmp	.+134    	; 0x2be <vStringparserParse+0xf2>
	}
	
	//Errors
	if(strng[0]=='*' || strng[0]=='/' || strng[string_length-1]=='+' || strng[string_length-1]=='-' || strng[string_length-1]=='*' || strng[string_length-1]=='/')
	{
		output->err = CALC_SYNTAX_ERR;
 238:	81 e0       	ldi	r24, 0x01	; 1
 23a:	fb 01       	movw	r30, r22
 23c:	85 83       	std	Z+5, r24	; 0x05
 23e:	4e c0       	rjmp	.+156    	; 0x2dc <vStringparserParse+0x110>
	}else{
		//Test string
		while(string_index<string_length)
 240:	40 e0       	ldi	r20, 0x00	; 0
 242:	30 e0       	ldi	r19, 0x00	; 0
				op_count++;
				output->op= MUL;
			}else if( strng[string_index] == '/')
			{
				op_count++;
				output->op= DIV;
 244:	68 94       	set
 246:	ff 24       	eor	r15, r15
 248:	f2 f8       	bld	r15, 2
				op_count++;
				output->op= SUB;
			}else if( strng[string_index] == '*')
			{
				op_count++;
				output->op= MUL;
 24a:	03 e0       	ldi	r16, 0x03	; 3
				op_count++;
				output->op= ADD;
			}else if( strng[string_index] == '-')
			{
				op_count++;
				output->op= SUB;
 24c:	12 e0       	ldi	r17, 0x02	; 2
				}
				
			}else if( strng[string_index] == '+')
			{
				op_count++;
				output->op= ADD;
 24e:	51 e0       	ldi	r21, 0x01	; 1
		output->err = CALC_SYNTAX_ERR;
	}else{
		//Test string
		while(string_index<string_length)
		{
			if( isdigit(strng[string_index]) )
 250:	2c 91       	ld	r18, X
 252:	82 2f       	mov	r24, r18
 254:	90 e0       	ldi	r25, 0x00	; 0
 256:	c0 97       	sbiw	r24, 0x30	; 48
 258:	0a 97       	sbiw	r24, 0x0a	; 10
 25a:	c8 f4       	brcc	.+50     	; 0x28e <vStringparserParse+0xc2>
			{
				if(op_count==0){
 25c:	31 11       	cpse	r19, r1
 25e:	09 c0       	rjmp	.+18     	; 0x272 <vStringparserParse+0xa6>
					temp1[temp_index] = strng[string_index];
 260:	e1 e0       	ldi	r30, 0x01	; 1
 262:	f0 e0       	ldi	r31, 0x00	; 0
 264:	ec 0f       	add	r30, r28
 266:	fd 1f       	adc	r31, r29
 268:	e4 0f       	add	r30, r20
 26a:	f1 1d       	adc	r31, r1
 26c:	20 83       	st	Z, r18
					temp_index++;
 26e:	4f 5f       	subi	r20, 0xFF	; 255
 270:	ef cf       	rjmp	.-34     	; 0x250 <vStringparserParse+0x84>
				}else if(op_count==1)
 272:	31 30       	cpi	r19, 0x01	; 1
 274:	49 f4       	brne	.+18     	; 0x288 <vStringparserParse+0xbc>
				{
					temp2[temp_index] = strng[string_index];
 276:	e4 e0       	ldi	r30, 0x04	; 4
 278:	f0 e0       	ldi	r31, 0x00	; 0
 27a:	ec 0f       	add	r30, r28
 27c:	fd 1f       	adc	r31, r29
 27e:	e4 0f       	add	r30, r20
 280:	f1 1d       	adc	r31, r1
 282:	20 83       	st	Z, r18
					temp_index++;
 284:	4f 5f       	subi	r20, 0xFF	; 255
 286:	e4 cf       	rjmp	.-56     	; 0x250 <vStringparserParse+0x84>
				}else
				{
					output->err = CALC_SYNTAX_ERR;
 288:	fb 01       	movw	r30, r22
 28a:	55 83       	std	Z+5, r21	; 0x05
 28c:	e1 cf       	rjmp	.-62     	; 0x250 <vStringparserParse+0x84>
					temp1[0]='\0';
					temp2[0]='\0';
				}
				
			}else if( strng[string_index] == '+')
 28e:	2b 32       	cpi	r18, 0x2B	; 43
 290:	21 f4       	brne	.+8      	; 0x29a <vStringparserParse+0xce>
			{
				op_count++;
 292:	3f 5f       	subi	r19, 0xFF	; 255
				output->op= ADD;
 294:	fb 01       	movw	r30, r22
 296:	54 83       	std	Z+4, r21	; 0x04
 298:	db cf       	rjmp	.-74     	; 0x250 <vStringparserParse+0x84>
			}else if( strng[string_index] == '-')
 29a:	2d 32       	cpi	r18, 0x2D	; 45
 29c:	21 f4       	brne	.+8      	; 0x2a6 <vStringparserParse+0xda>
			{
				op_count++;
 29e:	3f 5f       	subi	r19, 0xFF	; 255
				output->op= SUB;
 2a0:	fb 01       	movw	r30, r22
 2a2:	14 83       	std	Z+4, r17	; 0x04
 2a4:	d5 cf       	rjmp	.-86     	; 0x250 <vStringparserParse+0x84>
			}else if( strng[string_index] == '*')
 2a6:	2a 32       	cpi	r18, 0x2A	; 42
 2a8:	21 f4       	brne	.+8      	; 0x2b2 <vStringparserParse+0xe6>
			{
				op_count++;
 2aa:	3f 5f       	subi	r19, 0xFF	; 255
				output->op= MUL;
 2ac:	fb 01       	movw	r30, r22
 2ae:	04 83       	std	Z+4, r16	; 0x04
 2b0:	cf cf       	rjmp	.-98     	; 0x250 <vStringparserParse+0x84>
			}else if( strng[string_index] == '/')
 2b2:	2f 32       	cpi	r18, 0x2F	; 47
 2b4:	69 f6       	brne	.-102    	; 0x250 <vStringparserParse+0x84>
			{
				op_count++;
 2b6:	3f 5f       	subi	r19, 0xFF	; 255
				output->op= DIV;
 2b8:	fb 01       	movw	r30, r22
 2ba:	f4 82       	std	Z+4, r15	; 0x04
 2bc:	c9 cf       	rjmp	.-110    	; 0x250 <vStringparserParse+0x84>
 2be:	8b 01       	movw	r16, r22
			}
		}
		output->num1 = atoi(temp1);
 2c0:	ce 01       	movw	r24, r28
 2c2:	01 96       	adiw	r24, 0x01	; 1
 2c4:	0e 94 ae 02 	call	0x55c	; 0x55c <atoi>
 2c8:	f8 01       	movw	r30, r16
 2ca:	91 83       	std	Z+1, r25	; 0x01
 2cc:	80 83       	st	Z, r24
		output->num2 = atoi(temp2);
 2ce:	ce 01       	movw	r24, r28
 2d0:	04 96       	adiw	r24, 0x04	; 4
 2d2:	0e 94 ae 02 	call	0x55c	; 0x55c <atoi>
 2d6:	f8 01       	movw	r30, r16
 2d8:	93 83       	std	Z+3, r25	; 0x03
 2da:	82 83       	std	Z+2, r24	; 0x02
	}
	
}
 2dc:	26 96       	adiw	r28, 0x06	; 6
 2de:	0f b6       	in	r0, 0x3f	; 63
 2e0:	f8 94       	cli
 2e2:	de bf       	out	0x3e, r29	; 62
 2e4:	0f be       	out	0x3f, r0	; 63
 2e6:	cd bf       	out	0x3d, r28	; 61
 2e8:	df 91       	pop	r29
 2ea:	cf 91       	pop	r28
 2ec:	1f 91       	pop	r17
 2ee:	0f 91       	pop	r16
 2f0:	ff 90       	pop	r15
 2f2:	08 95       	ret

000002f4 <vKeypadInit>:
	//input 0
	//output 0
	
	//set rows as o/p
	
	ROW0_DIR |= (1U<<ROW0);
 2f4:	a0 9a       	sbi	0x14, 0	; 20
	ROW1_DIR |= (1U<<ROW1);
 2f6:	a1 9a       	sbi	0x14, 1	; 20
	ROW2_DIR |= (1U<<ROW2);
 2f8:	a2 9a       	sbi	0x14, 2	; 20
	ROW3_DIR |= (1U<<ROW3);
 2fa:	a3 9a       	sbi	0x14, 3	; 20
	
	//set lines as i/p
	LINE0_DIR &= ~(1U<<LINE0);
 2fc:	a4 98       	cbi	0x14, 4	; 20
	LINE1_DIR &= ~(1U<<LINE1);
 2fe:	a5 98       	cbi	0x14, 5	; 20
	LINE2_DIR &= ~(1U<<LINE2);
 300:	a6 98       	cbi	0x14, 6	; 20
	LINE3_DIR &= ~(1U<<LINE3);
 302:	a7 98       	cbi	0x14, 7	; 20
	
	//set internal pullups on i/p
	LINE0_PULLUP |= (1U<<LINE0);
 304:	ac 9a       	sbi	0x15, 4	; 21
	LINE1_PULLUP |= (1U<<LINE1);
 306:	ad 9a       	sbi	0x15, 5	; 21
	LINE2_PULLUP |= (1U<<LINE2);
 308:	ae 9a       	sbi	0x15, 6	; 21
	LINE3_PULLUP |= (1U<<LINE3);
 30a:	af 9a       	sbi	0x15, 7	; 21
	
	//reset rows to no output 1
	ROW0_DATAOUT |= (NO_OUTPUT_STATE<<ROW0);
 30c:	a8 9a       	sbi	0x15, 0	; 21
	ROW1_DATAOUT |= (NO_OUTPUT_STATE<<ROW1);
 30e:	a9 9a       	sbi	0x15, 1	; 21
	ROW2_DATAOUT |= (NO_OUTPUT_STATE<<ROW2);
 310:	aa 9a       	sbi	0x15, 2	; 21
	ROW3_DATAOUT |= (NO_OUTPUT_STATE<<ROW3);
 312:	ab 9a       	sbi	0x15, 3	; 21
 314:	08 95       	ret

00000316 <ucKeypadScan>:
	uint8_t row=0;
	uint8_t line=NO_VALID_INPUT;
	unsigned char result= NO_VALID_INPUT;
	
	//loop on rows
	for(row=0;row<4;row++)
 316:	e0 e0       	ldi	r30, 0x00	; 0
	{
		//RESET PINS
		ROW0_DATAOUT |= (1U<<ROW0);
 318:	a8 9a       	sbi	0x15, 0	; 21
		ROW1_DATAOUT |= (1U<<ROW1);
 31a:	a9 9a       	sbi	0x15, 1	; 21
		ROW1_DATAOUT |= (1U<<ROW2);
 31c:	aa 9a       	sbi	0x15, 2	; 21
		ROW1_DATAOUT |= (1U<<ROW3);
 31e:	ab 9a       	sbi	0x15, 3	; 21
		
		//set the numbered row to output state 0
		switch(row)
 320:	e1 30       	cpi	r30, 0x01	; 1
 322:	41 f0       	breq	.+16     	; 0x334 <ucKeypadScan+0x1e>
 324:	28 f0       	brcs	.+10     	; 0x330 <ucKeypadScan+0x1a>
 326:	e2 30       	cpi	r30, 0x02	; 2
 328:	39 f0       	breq	.+14     	; 0x338 <ucKeypadScan+0x22>
 32a:	e3 30       	cpi	r30, 0x03	; 3
 32c:	39 f0       	breq	.+14     	; 0x33c <ucKeypadScan+0x26>
 32e:	07 c0       	rjmp	.+14     	; 0x33e <ucKeypadScan+0x28>
		{
			case 0:ROW0_DATAOUT &= ~(OUTPUT_STATE<<ROW0);break;
 330:	a8 98       	cbi	0x15, 0	; 21
 332:	05 c0       	rjmp	.+10     	; 0x33e <ucKeypadScan+0x28>
			case 1:ROW1_DATAOUT &= ~(OUTPUT_STATE<<ROW1);break;
 334:	a9 98       	cbi	0x15, 1	; 21
 336:	03 c0       	rjmp	.+6      	; 0x33e <ucKeypadScan+0x28>
			case 2:ROW2_DATAOUT &= ~(OUTPUT_STATE<<ROW2);break;
 338:	aa 98       	cbi	0x15, 2	; 21
 33a:	01 c0       	rjmp	.+2      	; 0x33e <ucKeypadScan+0x28>
			case 3:ROW3_DATAOUT &= ~(OUTPUT_STATE<<ROW3);break;
 33c:	ab 98       	cbi	0x15, 3	; 21
			default:break;
		}
		//check inputs
		if((LINE0_DATAIN&(1U<<LINE0)) == INPUT_STATE)	{line = 0;}
 33e:	9c 9b       	sbis	0x13, 4	; 19
 340:	1a c0       	rjmp	.+52     	; 0x376 <ucKeypadScan+0x60>
		else if((LINE1_DATAIN&(1U<<LINE1)) == INPUT_STATE)	{line = 1;}
 342:	9d 9b       	sbis	0x13, 5	; 19
 344:	1a c0       	rjmp	.+52     	; 0x37a <ucKeypadScan+0x64>
		else if((LINE2_DATAIN&(1U<<LINE2)) == INPUT_STATE)	{line = 2;}
 346:	9e 9b       	sbis	0x13, 6	; 19
 348:	1a c0       	rjmp	.+52     	; 0x37e <ucKeypadScan+0x68>
		else if((LINE3_DATAIN&(1U<<LINE3)) == INPUT_STATE)	{line = 3;}
 34a:	9f 9b       	sbis	0x13, 7	; 19
 34c:	1a c0       	rjmp	.+52     	; 0x382 <ucKeypadScan+0x6c>
 34e:	1b c0       	rjmp	.+54     	; 0x386 <ucKeypadScan+0x70>
		
			//if there is a valid input
			if(line != NO_VALID_INPUT)
			{
				//wait until input is gone
				while(INPUT_IS_STILL_VALID == INPUT_STATE /*there is valid input*/);
 350:	9c 9b       	sbis	0x13, 4	; 19
 352:	fe cf       	rjmp	.-4      	; 0x350 <ucKeypadScan+0x3a>
 354:	9d 9b       	sbis	0x13, 5	; 19
 356:	fc cf       	rjmp	.-8      	; 0x350 <ucKeypadScan+0x3a>
 358:	9e 9b       	sbis	0x13, 6	; 19
 35a:	fa cf       	rjmp	.-12     	; 0x350 <ucKeypadScan+0x3a>
 35c:	9f 9b       	sbis	0x13, 7	; 19
 35e:	f8 cf       	rjmp	.-16     	; 0x350 <ucKeypadScan+0x3a>
				
				//return mapped key to this input
				result = g_Keypad_Mapping[row][line];
 360:	f0 e0       	ldi	r31, 0x00	; 0
 362:	ee 0f       	add	r30, r30
 364:	ff 1f       	adc	r31, r31
 366:	ee 0f       	add	r30, r30
 368:	ff 1f       	adc	r31, r31
 36a:	e8 58       	subi	r30, 0x88	; 136
 36c:	ff 4f       	sbci	r31, 0xFF	; 255
 36e:	e8 0f       	add	r30, r24
 370:	f1 1d       	adc	r31, r1
 372:	80 81       	ld	r24, Z
				break;
 374:	08 95       	ret
			case 2:ROW2_DATAOUT &= ~(OUTPUT_STATE<<ROW2);break;
			case 3:ROW3_DATAOUT &= ~(OUTPUT_STATE<<ROW3);break;
			default:break;
		}
		//check inputs
		if((LINE0_DATAIN&(1U<<LINE0)) == INPUT_STATE)	{line = 0;}
 376:	80 e0       	ldi	r24, 0x00	; 0
 378:	eb cf       	rjmp	.-42     	; 0x350 <ucKeypadScan+0x3a>
		else if((LINE1_DATAIN&(1U<<LINE1)) == INPUT_STATE)	{line = 1;}
 37a:	81 e0       	ldi	r24, 0x01	; 1
 37c:	e9 cf       	rjmp	.-46     	; 0x350 <ucKeypadScan+0x3a>
		else if((LINE2_DATAIN&(1U<<LINE2)) == INPUT_STATE)	{line = 2;}
 37e:	82 e0       	ldi	r24, 0x02	; 2
 380:	e7 cf       	rjmp	.-50     	; 0x350 <ucKeypadScan+0x3a>
		else if((LINE3_DATAIN&(1U<<LINE3)) == INPUT_STATE)	{line = 3;}
 382:	83 e0       	ldi	r24, 0x03	; 3
 384:	e5 cf       	rjmp	.-54     	; 0x350 <ucKeypadScan+0x3a>
	uint8_t row=0;
	uint8_t line=NO_VALID_INPUT;
	unsigned char result= NO_VALID_INPUT;
	
	//loop on rows
	for(row=0;row<4;row++)
 386:	ef 5f       	subi	r30, 0xFF	; 255
 388:	e4 30       	cpi	r30, 0x04	; 4
 38a:	31 f6       	brne	.-116    	; 0x318 <ucKeypadScan+0x2>
	*Callee: DIO
	*/
		
	uint8_t row=0;
	uint8_t line=NO_VALID_INPUT;
	unsigned char result= NO_VALID_INPUT;
 38c:	8f ef       	ldi	r24, 0xFF	; 255
				result = g_Keypad_Mapping[row][line];
				break;
			}
	}
		return result;
 38e:	08 95       	ret

00000390 <vLCDSend4bit>:
{
	vLCDSendCommand(0x01); //Clear Display
}
static void vLCDSend4bit(uint8_t nibble) //Write 4bits of data to the higher nibble of the LCD using DIO
{
	((nibble&1U)==1U)? (LCD_D4_REG |= (1U<<LCD_D4)) : (LCD_D4_REG &= ~(1U<<LCD_D4));
 390:	80 ff       	sbrs	r24, 0
 392:	02 c0       	rjmp	.+4      	; 0x398 <vLCDSend4bit+0x8>
 394:	dc 9a       	sbi	0x1b, 4	; 27
 396:	01 c0       	rjmp	.+2      	; 0x39a <vLCDSend4bit+0xa>
 398:	dc 98       	cbi	0x1b, 4	; 27
	(((nibble>>1U)&1U)==1U)? (LCD_D5_REG |= (1U<<LCD_D5)) : (LCD_D5_REG &= ~(1U<<LCD_D5));
 39a:	81 ff       	sbrs	r24, 1
 39c:	02 c0       	rjmp	.+4      	; 0x3a2 <vLCDSend4bit+0x12>
 39e:	dd 9a       	sbi	0x1b, 5	; 27
 3a0:	01 c0       	rjmp	.+2      	; 0x3a4 <vLCDSend4bit+0x14>
 3a2:	dd 98       	cbi	0x1b, 5	; 27
	(((nibble>>2U)&1U)==1U)? (LCD_D6_REG |= (1U<<LCD_D6)) : (LCD_D6_REG &= ~(1U<<LCD_D6));
 3a4:	82 ff       	sbrs	r24, 2
 3a6:	02 c0       	rjmp	.+4      	; 0x3ac <vLCDSend4bit+0x1c>
 3a8:	de 9a       	sbi	0x1b, 6	; 27
 3aa:	01 c0       	rjmp	.+2      	; 0x3ae <vLCDSend4bit+0x1e>
 3ac:	de 98       	cbi	0x1b, 6	; 27
	(((nibble>>3U)&1U)==1U)? (LCD_D7_REG |= (1U<<LCD_D7)) : (LCD_D7_REG &= ~(1U<<LCD_D7));
 3ae:	83 ff       	sbrs	r24, 3
 3b0:	02 c0       	rjmp	.+4      	; 0x3b6 <vLCDSend4bit+0x26>
 3b2:	df 9a       	sbi	0x1b, 7	; 27
 3b4:	01 c0       	rjmp	.+2      	; 0x3b8 <vLCDSend4bit+0x28>
 3b6:	df 98       	cbi	0x1b, 7	; 27
	
	LCD_E_REG |= (1U<<LCD_E); //Set enable bit
 3b8:	c3 9a       	sbi	0x18, 3	; 24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 3ba:	8f e6       	ldi	r24, 0x6F	; 111
 3bc:	97 e1       	ldi	r25, 0x17	; 23
 3be:	01 97       	sbiw	r24, 0x01	; 1
 3c0:	f1 f7       	brne	.-4      	; 0x3be <vLCDSend4bit+0x2e>
 3c2:	00 c0       	rjmp	.+0      	; 0x3c4 <vLCDSend4bit+0x34>
 3c4:	00 00       	nop
	_delay_ms(2);
	LCD_E_REG &= ~(1U<<LCD_E); //Clear enable bit
 3c6:	c3 98       	cbi	0x18, 3	; 24
 3c8:	08 95       	ret

000003ca <vLCDSendCommand>:
	_delay_ms(2);
	vLCDSendCommand(0x06); //Entry mode: LTR / no shift
	_delay_ms(2);
}
static void vLCDSendCommand(uint8_t command)
{
 3ca:	cf 93       	push	r28
 3cc:	c8 2f       	mov	r28, r24
	LCD_RW_REG &= ~(1<<LCD_RW); //Set write mode
 3ce:	c2 98       	cbi	0x18, 2	; 24
	LCD_RS_REG &= ~(1<<LCD_RS); //Set instruction mode
 3d0:	c1 98       	cbi	0x18, 1	; 24
	
	vLCDSend4bit(command>>4); //Write higher 4bits
 3d2:	82 95       	swap	r24
 3d4:	8f 70       	andi	r24, 0x0F	; 15
 3d6:	0e 94 c8 01 	call	0x390	; 0x390 <vLCDSend4bit>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 3da:	8b e2       	ldi	r24, 0x2B	; 43
 3dc:	91 e0       	ldi	r25, 0x01	; 1
 3de:	01 97       	sbiw	r24, 0x01	; 1
 3e0:	f1 f7       	brne	.-4      	; 0x3de <vLCDSendCommand+0x14>
 3e2:	00 c0       	rjmp	.+0      	; 0x3e4 <vLCDSendCommand+0x1a>
 3e4:	00 00       	nop
	_delay_us(100);
	vLCDSend4bit(command); //Write lower 4bits
 3e6:	8c 2f       	mov	r24, r28
 3e8:	0e 94 c8 01 	call	0x390	; 0x390 <vLCDSend4bit>
	
	LCD_E_REG &= ~(1<<LCD_E); //Clear enable
 3ec:	c3 98       	cbi	0x18, 3	; 24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 3ee:	8f e6       	ldi	r24, 0x6F	; 111
 3f0:	97 e1       	ldi	r25, 0x17	; 23
 3f2:	01 97       	sbiw	r24, 0x01	; 1
 3f4:	f1 f7       	brne	.-4      	; 0x3f2 <vLCDSendCommand+0x28>
 3f6:	00 c0       	rjmp	.+0      	; 0x3f8 <vLCDSendCommand+0x2e>
 3f8:	00 00       	nop
	_delay_ms(2);
	LCD_E_REG |= (1<<LCD_E); //Set enable
 3fa:	c3 9a       	sbi	0x18, 3	; 24
	
}
 3fc:	cf 91       	pop	r28
 3fe:	08 95       	ret

00000400 <vLCDSendCharacter>:
void vLCDSendCharacter(unsigned char character)
{
 400:	cf 93       	push	r28
 402:	c8 2f       	mov	r28, r24
	LCD_RW_REG &= ~(1<<LCD_RW); //Set write mode
 404:	c2 98       	cbi	0x18, 2	; 24
	LCD_RS_REG |= (1<<LCD_RS); //Set data mode
 406:	c1 9a       	sbi	0x18, 1	; 24
	
	vLCDSend4bit(character>>4); //Write higher 4bits
 408:	82 95       	swap	r24
 40a:	8f 70       	andi	r24, 0x0F	; 15
 40c:	0e 94 c8 01 	call	0x390	; 0x390 <vLCDSend4bit>
	vLCDSend4bit(character); //Write lower 4bits
 410:	8c 2f       	mov	r24, r28
 412:	0e 94 c8 01 	call	0x390	; 0x390 <vLCDSend4bit>
	
	LCD_E_REG &= ~(1<<LCD_E); //Clear enable
 416:	c3 98       	cbi	0x18, 3	; 24
 418:	8f e6       	ldi	r24, 0x6F	; 111
 41a:	97 e1       	ldi	r25, 0x17	; 23
 41c:	01 97       	sbiw	r24, 0x01	; 1
 41e:	f1 f7       	brne	.-4      	; 0x41c <vLCDSendCharacter+0x1c>
 420:	00 c0       	rjmp	.+0      	; 0x422 <vLCDSendCharacter+0x22>
 422:	00 00       	nop
	_delay_ms(2);
	LCD_E_REG |= (1<<LCD_E); //Set enable
 424:	c3 9a       	sbi	0x18, 3	; 24
}
 426:	cf 91       	pop	r28
 428:	08 95       	ret

0000042a <vLCDSendString>:
void vLCDSendString(char *ptr)
{
 42a:	ef 92       	push	r14
 42c:	ff 92       	push	r15
 42e:	0f 93       	push	r16
 430:	1f 93       	push	r17
 432:	cf 93       	push	r28
	uint8_t i=0;
	for(i=0 ; ptr[i]!='\0' && i<=2U*LCD_LINE_LENGTH ; i++)
 434:	fc 01       	movw	r30, r24
 436:	20 81       	ld	r18, Z
 438:	22 23       	and	r18, r18
 43a:	29 f1       	breq	.+74     	; 0x486 <vLCDSendString+0x5c>
 43c:	7c 01       	movw	r14, r24
 43e:	ff ef       	ldi	r31, 0xFF	; 255
 440:	ef 1a       	sub	r14, r31
 442:	ff 0a       	sbc	r15, r31
 444:	8c 01       	movw	r16, r24
 446:	c1 e0       	ldi	r28, 0x01	; 1
 448:	06 c0       	rjmp	.+12     	; 0x456 <vLCDSendString+0x2c>
 44a:	cf 5f       	subi	r28, 0xFF	; 255
 44c:	2f ef       	ldi	r18, 0xFF	; 255
 44e:	e2 1a       	sub	r14, r18
 450:	f2 0a       	sbc	r15, r18
 452:	0f 5f       	subi	r16, 0xFF	; 255
 454:	1f 4f       	sbci	r17, 0xFF	; 255
	{
		if(i==LCD_LINE_LENGTH)
 456:	c1 31       	cpi	r28, 0x11	; 17
 458:	61 f4       	brne	.+24     	; 0x472 <vLCDSendString+0x48>
	}
	else if (1U == y)
	{
		if (x>=0 && x <=15)
		{
			vLCDSendCommand(0xC0 + x);
 45a:	80 ec       	ldi	r24, 0xC0	; 192
 45c:	0e 94 e5 01 	call	0x3ca	; 0x3ca <vLCDSendCommand>
	{
		if(i==LCD_LINE_LENGTH)
		{
			vLCDGotoXY(0,1);
		}
		vLCDSendCharacter(ptr[i]);
 460:	f8 01       	movw	r30, r16
 462:	80 81       	ld	r24, Z
 464:	0e 94 00 02 	call	0x400	; 0x400 <vLCDSendCharacter>
	LCD_E_REG |= (1<<LCD_E); //Set enable
}
void vLCDSendString(char *ptr)
{
	uint8_t i=0;
	for(i=0 ; ptr[i]!='\0' && i<=2U*LCD_LINE_LENGTH ; i++)
 468:	f7 01       	movw	r30, r14
 46a:	80 81       	ld	r24, Z
 46c:	81 11       	cpse	r24, r1
 46e:	ed cf       	rjmp	.-38     	; 0x44a <vLCDSendString+0x20>
 470:	0a c0       	rjmp	.+20     	; 0x486 <vLCDSendString+0x5c>
	{
		if(i==LCD_LINE_LENGTH)
		{
			vLCDGotoXY(0,1);
		}
		vLCDSendCharacter(ptr[i]);
 472:	f8 01       	movw	r30, r16
 474:	80 81       	ld	r24, Z
 476:	0e 94 00 02 	call	0x400	; 0x400 <vLCDSendCharacter>
	LCD_E_REG |= (1<<LCD_E); //Set enable
}
void vLCDSendString(char *ptr)
{
	uint8_t i=0;
	for(i=0 ; ptr[i]!='\0' && i<=2U*LCD_LINE_LENGTH ; i++)
 47a:	f7 01       	movw	r30, r14
 47c:	80 81       	ld	r24, Z
 47e:	88 23       	and	r24, r24
 480:	11 f0       	breq	.+4      	; 0x486 <vLCDSendString+0x5c>
 482:	c1 32       	cpi	r28, 0x21	; 33
 484:	10 f3       	brcs	.-60     	; 0x44a <vLCDSendString+0x20>
		{
			vLCDGotoXY(0,1);
		}
		vLCDSendCharacter(ptr[i]);
	}
}
 486:	cf 91       	pop	r28
 488:	1f 91       	pop	r17
 48a:	0f 91       	pop	r16
 48c:	ff 90       	pop	r15
 48e:	ef 90       	pop	r14
 490:	08 95       	ret

00000492 <vLCDGotoXY>:
void vLCDGotoXY(uint8_t x,uint8_t y)
{
	if(0 == y)
 492:	61 11       	cpse	r22, r1
 494:	06 c0       	rjmp	.+12     	; 0x4a2 <vLCDGotoXY+0x10>
	{
		if (x>=0 && x <=15)
 496:	80 31       	cpi	r24, 0x10	; 16
 498:	58 f4       	brcc	.+22     	; 0x4b0 <vLCDGotoXY+0x1e>
		{
			vLCDSendCommand(0x80 + x);
 49a:	80 58       	subi	r24, 0x80	; 128
 49c:	0e 94 e5 01 	call	0x3ca	; 0x3ca <vLCDSendCommand>
 4a0:	08 95       	ret
		}
	}
	else if (1U == y)
 4a2:	61 30       	cpi	r22, 0x01	; 1
 4a4:	29 f4       	brne	.+10     	; 0x4b0 <vLCDGotoXY+0x1e>
	{
		if (x>=0 && x <=15)
 4a6:	80 31       	cpi	r24, 0x10	; 16
 4a8:	18 f4       	brcc	.+6      	; 0x4b0 <vLCDGotoXY+0x1e>
		{
			vLCDSendCommand(0xC0 + x);
 4aa:	80 54       	subi	r24, 0x40	; 64
 4ac:	0e 94 e5 01 	call	0x3ca	; 0x3ca <vLCDSendCommand>
 4b0:	08 95       	ret

000004b2 <vLCDClearDisplay>:
		}
	}
}
void vLCDClearDisplay(void)
{
	vLCDSendCommand(0x01); //Clear Display
 4b2:	81 e0       	ldi	r24, 0x01	; 1
 4b4:	0e 94 e5 01 	call	0x3ca	; 0x3ca <vLCDSendCommand>
 4b8:	08 95       	ret

000004ba <vLCDInit>:

void vLCDInit(void)
{

	//Initialize DIO by settings pin directions to output
	LCD_RS_DDR |= (1<<LCD_RS);
 4ba:	b9 9a       	sbi	0x17, 1	; 23
	LCD_RW_DDR |= (1<<LCD_RW);
 4bc:	ba 9a       	sbi	0x17, 2	; 23
	LCD_E_DDR |= (1<<LCD_E);
 4be:	bb 9a       	sbi	0x17, 3	; 23
	LCD_D4_DDR |= (1<<LCD_D4);
 4c0:	d4 9a       	sbi	0x1a, 4	; 26
	LCD_D5_DDR |= (1<<LCD_D5);
 4c2:	d5 9a       	sbi	0x1a, 5	; 26
	LCD_D6_DDR |= (1<<LCD_D6);
 4c4:	d6 9a       	sbi	0x1a, 6	; 26
	LCD_D7_DDR |= (1<<LCD_D7);
 4c6:	d7 9a       	sbi	0x1a, 7	; 26
 4c8:	2f e7       	ldi	r18, 0x7F	; 127
 4ca:	89 ea       	ldi	r24, 0xA9	; 169
 4cc:	93 e0       	ldi	r25, 0x03	; 3
 4ce:	21 50       	subi	r18, 0x01	; 1
 4d0:	80 40       	sbci	r24, 0x00	; 0
 4d2:	90 40       	sbci	r25, 0x00	; 0
 4d4:	e1 f7       	brne	.-8      	; 0x4ce <vLCDInit+0x14>
 4d6:	00 c0       	rjmp	.+0      	; 0x4d8 <vLCDInit+0x1e>
 4d8:	00 00       	nop

	
	_delay_ms(100); //LCD power on delay
	
	//Resetting LCD Controller
	vLCDSend4bit(0x03);
 4da:	83 e0       	ldi	r24, 0x03	; 3
 4dc:	0e 94 c8 01 	call	0x390	; 0x390 <vLCDSend4bit>
 4e0:	8f e2       	ldi	r24, 0x2F	; 47
 4e2:	95 e7       	ldi	r25, 0x75	; 117
 4e4:	01 97       	sbiw	r24, 0x01	; 1
 4e6:	f1 f7       	brne	.-4      	; 0x4e4 <vLCDInit+0x2a>
 4e8:	00 c0       	rjmp	.+0      	; 0x4ea <vLCDInit+0x30>
 4ea:	00 00       	nop
	_delay_ms(10);
	vLCDSend4bit(0x03);
 4ec:	83 e0       	ldi	r24, 0x03	; 3
 4ee:	0e 94 c8 01 	call	0x390	; 0x390 <vLCDSend4bit>
 4f2:	87 eb       	ldi	r24, 0xB7	; 183
 4f4:	9b e0       	ldi	r25, 0x0B	; 11
 4f6:	01 97       	sbiw	r24, 0x01	; 1
 4f8:	f1 f7       	brne	.-4      	; 0x4f6 <vLCDInit+0x3c>
 4fa:	00 c0       	rjmp	.+0      	; 0x4fc <vLCDInit+0x42>
 4fc:	00 00       	nop
	_delay_ms(1);
	vLCDSend4bit(0x03);
 4fe:	83 e0       	ldi	r24, 0x03	; 3
 500:	0e 94 c8 01 	call	0x390	; 0x390 <vLCDSend4bit>
	vLCDSend4bit(0x02);
 504:	82 e0       	ldi	r24, 0x02	; 2
 506:	0e 94 c8 01 	call	0x390	; 0x390 <vLCDSend4bit>
	
	vLCDSendCommand(0x28); //Function Set: 4bit mode / 2 lines / normal font
 50a:	88 e2       	ldi	r24, 0x28	; 40
 50c:	0e 94 e5 01 	call	0x3ca	; 0x3ca <vLCDSendCommand>
 510:	87 eb       	ldi	r24, 0xB7	; 183
 512:	9b e0       	ldi	r25, 0x0B	; 11
 514:	01 97       	sbiw	r24, 0x01	; 1
 516:	f1 f7       	brne	.-4      	; 0x514 <vLCDInit+0x5a>
 518:	00 c0       	rjmp	.+0      	; 0x51a <vLCDInit+0x60>
 51a:	00 00       	nop
	_delay_ms(1);
	vLCDSendCommand(0x0F); //Display on / cursor on / blink on
 51c:	8f e0       	ldi	r24, 0x0F	; 15
 51e:	0e 94 e5 01 	call	0x3ca	; 0x3ca <vLCDSendCommand>
 522:	87 eb       	ldi	r24, 0xB7	; 183
 524:	9b e0       	ldi	r25, 0x0B	; 11
 526:	01 97       	sbiw	r24, 0x01	; 1
 528:	f1 f7       	brne	.-4      	; 0x526 <vLCDInit+0x6c>
 52a:	00 c0       	rjmp	.+0      	; 0x52c <vLCDInit+0x72>
 52c:	00 00       	nop
	_delay_ms(1);
	vLCDClearDisplay(); //Clear the display
 52e:	0e 94 59 02 	call	0x4b2	; 0x4b2 <vLCDClearDisplay>
 532:	8f e6       	ldi	r24, 0x6F	; 111
 534:	97 e1       	ldi	r25, 0x17	; 23
 536:	01 97       	sbiw	r24, 0x01	; 1
 538:	f1 f7       	brne	.-4      	; 0x536 <vLCDInit+0x7c>
 53a:	00 c0       	rjmp	.+0      	; 0x53c <vLCDInit+0x82>
 53c:	00 00       	nop
	_delay_ms(2);
	vLCDSendCommand(0x06); //Entry mode: LTR / no shift
 53e:	86 e0       	ldi	r24, 0x06	; 6
 540:	0e 94 e5 01 	call	0x3ca	; 0x3ca <vLCDSendCommand>
 544:	8f e6       	ldi	r24, 0x6F	; 111
 546:	97 e1       	ldi	r25, 0x17	; 23
 548:	01 97       	sbiw	r24, 0x01	; 1
 54a:	f1 f7       	brne	.-4      	; 0x548 <vLCDInit+0x8e>
 54c:	00 c0       	rjmp	.+0      	; 0x54e <vLCDInit+0x94>
 54e:	00 00       	nop
 550:	08 95       	ret

00000552 <main>:
 */ 
#include "Calculator/calculator.h"

int main()
{
	StartCalculator();
 552:	0e 94 41 00 	call	0x82	; 0x82 <StartCalculator>
 556:	80 e0       	ldi	r24, 0x00	; 0
 558:	90 e0       	ldi	r25, 0x00	; 0
 55a:	08 95       	ret

0000055c <atoi>:
 55c:	fc 01       	movw	r30, r24
 55e:	88 27       	eor	r24, r24
 560:	99 27       	eor	r25, r25
 562:	e8 94       	clt
 564:	21 91       	ld	r18, Z+
 566:	20 32       	cpi	r18, 0x20	; 32
 568:	e9 f3       	breq	.-6      	; 0x564 <atoi+0x8>
 56a:	29 30       	cpi	r18, 0x09	; 9
 56c:	10 f0       	brcs	.+4      	; 0x572 <atoi+0x16>
 56e:	2e 30       	cpi	r18, 0x0E	; 14
 570:	c8 f3       	brcs	.-14     	; 0x564 <atoi+0x8>
 572:	2b 32       	cpi	r18, 0x2B	; 43
 574:	41 f0       	breq	.+16     	; 0x586 <atoi+0x2a>
 576:	2d 32       	cpi	r18, 0x2D	; 45
 578:	39 f4       	brne	.+14     	; 0x588 <atoi+0x2c>
 57a:	68 94       	set
 57c:	04 c0       	rjmp	.+8      	; 0x586 <atoi+0x2a>
 57e:	0e 94 cc 02 	call	0x598	; 0x598 <__mulhi_const_10>
 582:	82 0f       	add	r24, r18
 584:	91 1d       	adc	r25, r1
 586:	21 91       	ld	r18, Z+
 588:	20 53       	subi	r18, 0x30	; 48
 58a:	2a 30       	cpi	r18, 0x0A	; 10
 58c:	c0 f3       	brcs	.-16     	; 0x57e <atoi+0x22>
 58e:	1e f4       	brtc	.+6      	; 0x596 <atoi+0x3a>
 590:	90 95       	com	r25
 592:	81 95       	neg	r24
 594:	9f 4f       	sbci	r25, 0xFF	; 255
 596:	08 95       	ret

00000598 <__mulhi_const_10>:
 598:	7a e0       	ldi	r23, 0x0A	; 10
 59a:	97 9f       	mul	r25, r23
 59c:	90 2d       	mov	r25, r0
 59e:	87 9f       	mul	r24, r23
 5a0:	80 2d       	mov	r24, r0
 5a2:	91 0d       	add	r25, r1
 5a4:	11 24       	eor	r1, r1
 5a6:	08 95       	ret

000005a8 <_exit>:
 5a8:	f8 94       	cli

000005aa <__stop_program>:
 5aa:	ff cf       	rjmp	.-2      	; 0x5aa <__stop_program>
